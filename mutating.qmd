# Mutating data

Often the data you have will prompt questions that it doesn't immediately answer. The amount of donations or number of votes are great, but comparing absolute numbers to each other is only useful if you have a very small number. We need percentages!

To do that in R, we can use `dplyr` and `mutate` to calculate new metrics in a new field using existing fields of data. That's the essence of `mutate` - using the data you have to answer a new question.

So first we'll import the tidyverse so we can read in our data and begin to work with it.

```{r}
#| output: false
library(tidyverse)
```

Now we'll import a dataset of county-level election results from Maryland's 2024 primary that is in the data folder in this chapter's pre-lab directory. We'll use this to explore ways to create new information from existing data.

```{r}
primary_24 <- read_csv('data/maryland_primary_2024.csv')
```

First, let's add a column called `percent_election_day` for the percentage of votes that were cast on election day for each candidate result in a county. The code to calculate a percentage is pretty simple. Remember, with `summarize`, we used `n()` to count things. With `mutate`, we use very similar syntax to calculate a new value -- a new column of data -- using other values in our dataset.

If we look at what we got when we imported the data, you'll see there's `election_day` as the numerator, and we'll use `votes` as the denominator. We can simply things by only selecting a few columns.

```{r}
primary_24 |>
  select(office_name, office_district, candidate_name, party, county_name, election_day, votes) |>
  mutate(
  percent_election_day = election_day/votes
)
```

Now we've got our `percent_election_day` column. But what do you see right away? Do those numbers look like we expect them to? No. They're a decimal expressed as a percentage. So let's fix that by multiplying by 100.

```{r}
primary_24 |>
  select(office_name, office_district, candidate_name, party, county_name, election_day, votes) |>
  mutate(
  percent_election_day = (election_day/votes)*100
)
```

Now, does this ordering do anything for us? No. Let's fix that with arrange.

```{r}
primary_24 |>
  select(office_name, office_district, candidate_name, party, county_name, election_day, votes) |>
  mutate(
  percent_election_day = (election_day/votes)*100
)  |> 
  arrange(desc(percent_election_day))
```

So now we have results ordered by `percent_election_day` with the highest percentage first. To see the lowest percentage first, we can reverse that `arrange` function.

```{r}
primary_24 |>
  select(office_name, office_district, candidate_name, party, county_name, election_day, votes) |>
  mutate(
  percent_election_day = (election_day/votes)*100
)  |> 
  arrange(percent_election_day)
```

Mutating can help us make different amounts easier to compare. We also can use filter to limit the data to meet certain conditions. For example, we could only look at the election day percentages of candidates who received at least 100 votes in a jurisdiction.

## Another use of mutate

Mutate is also useful for standardizing data - for example, making different spellings of, say, cities into a single one.

Let's load some campaign contribution data - in this case Maryland donors to Republican committees via WinRed's online platform earlier this year - and take a look at the `city` column in our data.

```{r}
maryland_cities <- read_csv("data/winred_md_cities.csv")
```

You'll notice that there's a mix of styles: "Baltimore" and "BALTIMORE" for example. R will think those are two different cities, and that will mean that any aggregates we create based on city won't be accurate.

So how can we fix that? Mutate - it's not just for math! And a function called `str_to_upper` that will convert a character column into all uppercase. Now we can say exactly how many donations came from Baltimore (I mean, of course, BALTIMORE).

```{r}
standardized_maryland_cities <- maryland_cities |>
  mutate(
    upper_city = str_to_upper(city)
)
```

Note that mutate doesn't literally combine similar records together - you'll still need to do another group_by and summarize block - but it does make your data more accurate. There are lots of potential uses for standardization - addresses, zip codes, anything that can be misspelled or abbreviated.

## A more powerful use

Mutate is even more useful when combined with some additional functions. Let's focus on individual contributions from Maryland donors via WinRed; we'd like to group their donations by amount into one of four categories:

1.  Under \$100
2.  \$101-\$499
3.  \$500-\$2,900
4.  More than \$2,901

Mutate can make that happen by creating a new column and putting in a category value *based on the amount* of each record. First, let's load the individual contributions that we did in the previous chapter:

```{r}
maryland_winred_contributions <- read_rds("data/maryland_winred.rds")

head(maryland_winred_contributions)
```

Now that we've gotten a look, we can use `case_when` to give our new category column a value using some standard numeric logic:

```{r}
maryland_winred_categories <- maryland_winred_contributions |>
  mutate(
    amount_category = case_when(
        amount < 100 ~ "Less than $100",
        amount >= 100 & amount <= 500 ~ "Between $100 and $500",
        amount > 500 & amount <= 3300 ~ "Between $501 and $3300",
        amount > 3300 ~ "More than $3,300"
      )
  )
```

We can then use our new `amount_category` column in group_by statements to make summarizing easier:

```{r}
maryland_winred_categories |>
  group_by(amount_category) |>
  summarize(total_amount = sum(amount)) |>
  arrange(desc(total_amount))
```

The largest category - by far - in dollar amount is the sub-\$100 category, which makes sense for an online fundraising platform. Big little money.

Mutate is there to make your data more useful and to make it easier for you to ask more and better questions of it.
