# Combining and joining

Often, as data journalists, we're looking at data across time or at data stored in multiple tables. And to do that, we need to often need to merge that data together.

Depending on what we have, we may just need to stack data on top of each other to make new data. If we have 2019 data and 2018 data and we want that to be one file, we stack them. If we have a dataset of cows in counties and a dataset of populations in county, we're going to join those two together on the county -- the common element.

Let's explore.

## Combining data (stacking)

Let's say that we have Maryland county voter registration data from five different elections in five different files. They have the same record layout and the same number of counties (plus Baltimore City). We can combine them into a single dataframe.

Let's do what we need to import them properly. I've merged it all into one step for each of the datasets.

```{r}
#| output: false
library(tidyverse)
```

```{r}
county_voters_2016 <- read_csv("data/county_voters_2016.csv")
county_voters_2018 <- read_csv("data/county_voters_2018.csv")
county_voters_2020 <- read_csv("data/county_voters_2020.csv")
county_voters_2022 <- read_csv("data/county_voters_2022.csv")
county_voters_2024 <- read_csv("data/county_voters_2024.csv")
```

All of these datasets have the same number of columns, all with the same names, so if we want to merge them together to compare them over time, we need to stack them together. The verb here, in R, is `bind_rows`. You tell the function what you want to combine and it does it, assuming that you've got column names in common containing identically formatted data.

Since we have five dataframes, we're going to need to pass them as a list, meaning they'll be enclosed inside the `list` function.

```{r}
county_voters_combined <- bind_rows(list(county_voters_2016, county_voters_2018, county_voters_2020, county_voters_2022, county_voters_2024))
```

And boom, like that, we have 125 rows of data together instead of five dataframes. Now we can ask more interesting questions like how a county's registration patterns have changed over time.

There are plenty of uses for `bind_rows`: any regularly updated data that comes in the same format like crime reports or award recipients or player game statistics. Or election results.

## Joining data

More complicated is when you have two separate tables that are connected by a common element or elements. But there's a verb for that, too: `join`.

Let's start by reading in some Maryland 2020 county population data:

```{r}
maryland_population <- read_csv('data/maryland_population_2020.csv')
```

One of the columns we have is called `county`, which is what we have in our county_voters_2020 dataframe.

To put the Maryland population data and voter registration data together, we need to use something called a join. There are different kinds of joins. It's better if you think of two tables sitting next to each other. A `left_join` takes all the records from the left table and only the records that match in the right one. A `right_join` does the same thing. An `inner_join` takes only the records where they are equal. There's one other join -- a `full_join` which returns all rows of both, regardless of if there's a match -- but I've never once had a use for a full join.

In the best-case scenario, the two tables we want to join share a common column. In this case, both of our tables have a column called `county` that has the same characteristics: values in both look identical, including how they distinguish Baltimore City from Baltimore County. This is important, because joins work on *exact matches*.

We can do this join multiple ways and get a similar result. We can put the population file on the left and the registration data on the right and use a left join to get them all together. And we use `by=` to join by the correct column. I'm going to count the rows at the end. The reason I'm doing this is important: **Rule 1 in joining data is having an idea of what you are expecting to get**. So with a left join with population on the left, I have 24 rows, so I expect to get 24 rows when I'm done.

```{r}
maryland_population |> left_join(county_voters_2020, by="COUNTY") |> nrow()
```

Remove the nrow and run it again for yourself. By default, `dplyr` will do a "natural" join, where it'll match all the matching columns in both tables. So if we take out the by, it'll use all the common columns between the tables. That may not be right in every instance but let's try it. If it works, we should get 24 rows.

```{r}
maryland_population |> left_join(county_voters_2020)
```

Since we only have one column in common between the two tables, the join only used that column. And we got the same answer. If we had more columns in common, you could see in your results columns with .X after them - that's a sign of duplicative columns between two tables, and you may decide you don't need both moving forward.

Let's save our joined data to a new dataframe, but this time let's remove the select function so we don't limit the columns to just three.

```{r}
maryland_population_with_voters <- maryland_population |> left_join(county_voters_2020)
```

Now, with our joined data, we can answer questions in a more useful way. But joins can do even more than just bring data together; they can include additional data to enable you to ask more sophisticated questions. Right now we have registered voters and total population. But we can do more.

Let's try adding more Maryland demographic data to the mix. Using a file describing the 18-and-over population (from which eligible voters come) from [the state's data catalog](https://planning.maryland.gov/MSDC/Pages/census/Census2020/pL_2020redistricting.aspx), we can read it into R:

```{r}
maryland_demographics <- read_csv('data/maryland_demographics.csv')
```

Again, we can use a `left_join` to make our demographic data available. This time we'll need to specify the two fields to join because they do not have identical names. We'll use `COUNTY` from our population data and `NAME` from the demographic data, and the order matters - the first column is from the dataframe you name *first*.

```{r, error=TRUE}
maryland_population_with_voters_and_demographics <- maryland_population_with_voters |> left_join(maryland_demographics, by=c("COUNTY"="NAME"))
```

Now we've got population data and demographic data by county. That means we can draw from both datasets in asking our questions. For example, we could see the counties with the highest 18+ Black population as a percentage of all population 18 and over and also the percentage of Democrats in that county.

We can get this by using mutate and arrange:

```{r}
maryland_population_with_voters_and_demographics |>
  mutate(pct_black_18_plus = (pop_black/pop_18_over)*100, pct_dems = (DEM/TOTAL)*100) |>
  arrange(desc(pct_black_18_plus)) |>
  select(COUNTY, pct_black_18_plus, pct_dems)
```

If you know Maryland political demographics, this result isn't too surprising, but Somerset County - the state's 2nd smallest in terms of population - stands out for its Black population, which is a greater percentage than Baltimore County and Montgomery County.

Let's change that to look at Asian population:

```{r}
maryland_population_with_voters_and_demographics |>
  mutate(pct_asian_18_plus = (pop_asian/pop_18_over)*100, pct_dems = (DEM/TOTAL)*100) |>
  arrange(desc(pct_asian_18_plus)) |>
  select(COUNTY, pct_asian_18_plus, pct_dems)
```

Here, Howard and Montgomery County stand out in terms of the percentage of Asian population 18 and over. The jurisdictions with the highest percentage of Democrats - Prince George's and Baltimore City - have small Asian populations.

Sometimes joins look like they should work but don't. Often this is due to the two columns you're joining on having different data types: joining a <chr> column to a <dbl> column, for example. Let's walk through an example of that using some demographic data by zip code.

```{r}
maryland_zcta <- read_csv('data/maryland_zcta.csv')
glimpse(maryland_zcta)
```

You can see that ZCTA5N, the column representing the Zip Code Tabulation Area, is a numeric column. But should it be? Do we ever want to know the average zip code in Maryland? Zip codes and ZCTAs look like numbers but really are character columns. Let's change that so that we can be sure to join them correctly with other data where the zip codes are not numbers. We'll use `mutate`:

```{r}
maryland_zcta <- maryland_zcta |> mutate(across(ZCTA5N, as.character))
```

What's happening here is that we're telling R to take all of the values in the ZCTA5N column and make them "as.character". If we wanted to change a column to numeric, we'd do "as.numeric". When you join two dataframes, the join columns *must* be the same datatype.

Joining datasets allows you to expand the range and sophistication of questions you're able to ask. It is one of the most powerful tools in a journalist's toolkit.
